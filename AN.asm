format binary as 'img'

org 0x7C00

jmp start


;_____________________________________________________________________________
;создаю строки для вывода на экаран
fi db "An Nikita", 0
otchestvo db "Olegovich", 0
group db "NMT-313901", 0
;_____________________________________________________________________________





;Настраиваю стек "start"
;_____________________________________________________________________________
start:
    cli                 ;Отключить прерывания
    mov ax, 0           ;Инициализация сегмента стека
    mov ss, ax          ;для загрузки сегмента стека (ss) в регистр ax
    mov sp, 0xFFFF      ;Установка указателя стека на верх
    sti                 ;Включить прерывания
    mov ax, 0x13        ;режим 320x200 256-цвета
    int 0x10
    mov ax, 0x0010      ; Установка графического режима текста
    int 0x10
;_____________________________________________________________________________




;Параметры моего треугольника (размещение по варианту снизу слева)
;затем вызываю функцию рисования фигуры
;_____________________________________________________________________________
    mov cx, 80          ;Х
    mov dx, 210           ;Y
    mov bx, 130          ;Высота треугольника
    call pryamoTreyg
;_____________________________________________________________________________



; Установка цвета фона
;_____________________________________________________________________________
    mov ah, 0x0B        ; Функция для установки цвета фона
    mov bl, 0x09        ; синий цвет фона
    int 0x10
;_____________________________________________________________________________





;построчно вывожу текст
;_____________________________________________________________________________
    mov ah, 0x13        ; Функция для вывода текста
    mov al, 0
    mov bh, 0
    mov bl, 14          ; Цвет текста желтый
    mov dl, 70          ;Колонка
    mov dh, 0          ;Строка
    push cs            ;помещает сегмент стека в стек
    pop es     ;восстанавливает сегмент стека из стека и сохраняет его в регистре es
    mov bp, fi
    mov cx, 9          ;Длина текста
    int 0x10

    mov ah, 0x13
    mov al, 0
    mov bh, 0
    mov bl, 14
    mov dl, 70
    mov dh, 1
    push cs
    pop es
    mov bp, otchestvo
    mov cx, 9
    int 0x10

    mov ah, 0x13
    mov al, 0
    mov bh, 0
    mov bl, 14
    mov dl, 70
    mov dh, 2
    push cs
    pop es
    mov bp, group
    mov cx, 10
    int 0x10

hang:
    jmp hang
;_____________________________________________________________________________






;Сам треугольник
;_____________________________________________________________________________
pryamoTreyg:
    pusha  ;помещает все регистры в стек
    mov bp, cx
triyg_loop:
    push cx
    mov ax, bx            ;ax для рисования линий уменьшающейся длины по очереди
    shr ax, 1             ;сдвиг на правую сторону (shift right) регистра ax на 1 бит
    sub cx, ax            ;Вычитание для получения начальной x координаты
    add ax, bp            ;Сложение для получения конечной x координаты
draw_line:
    cmp cx, ax   ;сравнивает значения регистра cx и ax. Результат сравнения затем используется
    jae line_done  ;в команде "jae line_done" для выполнения перехода, если значение регистра cx больше значения регистра ax.
    push ax
    push bx
    push dx

    mov ah, 0x0C          ;Функция для отрисовки пикселя
    mov al, 0x2C          ;Цвет оранжевый
    int 0x10              ;Прерывание BIOS

    pop dx         ;поп из стека в регистр dx
    pop bx
    pop ax
    inc cx         ;увеличить значение регистра cx на 1
    jmp draw_line       ;переход на адрес draw_line

line_done:
    pop cx  ;извлекает значение из стека и сохраняет его в регистре cx
    add dx, 1  ;увеличивает значение регистра dx на единицу
    add cx, 1  ;увеличивает значение регистра cx на единицу
    jnz triyg_loop   ;выполнить переход, если значение регистра cx больше нуля

    popa ;извлекает значения из стека и сохраняет их в регистрах ax, bx, cx, dx, bp, si и di
    ret  ;вернуть управление на предыдущую инструкцию
;_____________________________________________________________________________



;конец программы
times 510-($-$$) db 0
dw 0xAA55